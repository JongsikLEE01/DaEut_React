<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.aloha.server.auth.mapper.UserMapper">

    <!-- Users 객체의 resultMap 정의 -->
    <resultMap type="Users" id="userMap">
        <id property="userNo" column="user_no" />
        <result property="userName" column="user_name" />
        <result property="userPhone" column="user_phone" />
        <result property="userBirth" column="user_birth" />
        <result property="userAddress" column="user_address" />
        <result property="userEmail" column="user_email" />
        <result property="userGender" column="user_gender" />
        <result property="userId" column="user_id" />
        <result property="userPassword" column="user_password" />
        <result property="userRegDate" column="user_reg_date" />
        <result property="userCoupon" column="user_coupon" />
        <result property="userUpdDate" column="user_upd_date" />
        <result property="enabled" column="enabled" />
        
        <!-- user_auth 테이블과의 관계 매핑 -->
        <collection property="authList" ofType="UserAuth" resultMap="authMap"></collection>
    </resultMap>
        
    <!-- UserAuth 객체의 resultMap 정의 -->
    <resultMap type="UserAuth" id="authMap">
        <result property="authNo" column="auth_no" />
        <result property="userNo" column="user_no" />
        <result property="auth" column="auth" />
    </resultMap>

    <!-- Partner 객체의 resultMap 정의 -->
    <resultMap type="Partner" id="partnerMap">
        <id property="userNo" column="user_no" />
        <result property="partnerGrade" column="partner_grade" />
        <result property="partnerReserve" column="partner_reserve" />
        <result property="partnerCareer" column="partner_career" />
        <result property="introduce" column="introduce" />
        <!-- Users 객체와의 관계 매핑 -->
        <association property="user" javaType="Users" resultMap="userMap">
            <id property="userNo" column="user_no"/>
        </association>
    </resultMap>

    <!-- 관리자 회원 조회 - user_no로 조회 -->
    <select id="findUserById" resultMap="userMap">
        SELECT 
            u.user_no,
            u.user_name,
            u.user_phone,
            u.user_birth,
            u.user_address,
            u.user_email,
            u.user_gender,
            u.user_id,
            u.user_password,
            u.user_reg_date,
            u.user_coupon,
            u.user_upd_date,
            u.enabled,
            auth.auth
        FROM users u 
        LEFT OUTER JOIN user_auth auth ON u.user_no = auth.user_no
        WHERE u.user_no = #{userNo}
    </select>

    <!-- 로그인 - userId로 조회 -->
    <select id="login" resultMap="userMap">
        SELECT 
            u.user_no,
            u.user_name,
            u.user_phone,
            u.user_birth,
            u.user_address,
            u.user_email,
            u.user_gender,
            u.user_id,
            u.user_password,
            u.user_reg_date,
            u.user_coupon,
            u.user_upd_date,
            u.enabled,
            auth.auth
        FROM users u 
        LEFT JOIN user_auth auth ON u.user_no = auth.user_no
        WHERE u.user_id = #{userId}
    </select>

    <!-- 이메일로 회원 조회 -->
    <select id="findUserByEmail" resultMap="userMap">
        SELECT 
            u.user_no,
            u.user_name,
            u.user_phone,
            u.user_birth,
            u.user_address,
            u.user_email,
            u.user_gender,
            u.user_id,
            u.user_password,
            u.user_reg_date,
            u.user_coupon,
            u.user_upd_date,
            u.enabled,
            auth.auth
        FROM users u 
        LEFT OUTER JOIN user_auth auth ON u.user_no = auth.user_no
        WHERE u.user_email = #{userEmail}
    </select>

    <!-- 회원 조회 - userNo로 조회 -->
    <select id="selectUserNo" resultType="Users">
        SELECT *
        FROM users
        WHERE user_no = #{userNo}
    </select>

    <!-- 회원 조회 -->
    <select id="select" resultMap="userMap">
        SELECT 
            u.user_no,
            u.user_name,
            u.user_phone,
            u.user_birth,
            u.user_address,
            u.user_email,
            u.user_gender,
            u.user_id,
            u.user_password,
            u.user_reg_date,
            u.user_coupon,
            u.user_upd_date,
            u.enabled,
            u.status,
            auth.auth_no,
            auth.user_no AS auth_user_no,
            auth.auth
        FROM users u 
        LEFT JOIN user_auth auth ON u.user_no = auth.user_no
        WHERE u.user_id = #{userId}
    </select>


    <!-- 회원 권한 등록 -->
    <insert id="insertAuth">
        INSERT INTO user_auth( user_no, auth )
        VALUES ( #{userNo}, #{auth} )
    </insert>

    <!-- 회원 가입 -->
    <insert id="join" useGeneratedKeys="true" keyProperty="userNo">
        INSERT INTO users (user_name, user_phone, user_birth, user_address, user_email, user_gender, user_id, user_password, user_coupon)
        VALUES (#{userName}, #{userPhone}, #{userBirth}, #{userAddress}, #{userEmail}, #{userGender}, #{userId}, #{userPassword}, #{userCoupon})
    </insert>

    <!-- 아이디 찾기 -->
    <select id="findUserByDetails" resultType="String">
        SELECT u.user_id
        FROM users u
        WHERE u.user_name = #{userName} AND u.user_email = #{userEmail} AND u.user_phone = #{userPhone}
    </select>

    <!-- 파트너 신청 대기 - userNo로 업데이트 -->
    <update id="updateUserStatus">
        UPDATE users
        SET status = 1
        WHERE user_no = #{userNo}
    </update>

    <!-- 파트너 테이블에 partner_career, introduce, user_no 삽입 -->
    <insert id="insertPartner">
        INSERT INTO partner (partner_career, introduce, user_no)
        VALUES (#{partnerCareer}, #{introduce}, #{userNo})
    </insert>

    <!-- 비밀번호 찾기 - 비밀번호 재설정 -->
    <update id="updatePw">
        UPDATE users
        SET 
            user_password = #{userPassword},
            user_upd_date = now()
        WHERE user_id = #{userId}
    </update>

    <!-- user 및 partner 테이블에서 정보를 조회 -->
    <select id="selectUserAndPartnerDetails" resultMap="partnerMap">
        SELECT 
            u.user_no AS userNo,
            u.user_name AS userName,
            u.user_phone AS userPhone,
            u.user_birth AS userBirth,
            u.user_address AS userAddress,
            u.user_email AS userEmail,
            u.user_gender AS userGender,
            u.user_id AS userId,
            u.user_password AS userPassword,
            u.user_reg_date AS userRegDate,
            u.user_coupon AS userCoupon,
            u.user_upd_date AS userUpdDate,
            u.enabled,
            u.status,
            p.partner_no AS partnerNo,
            p.partner_grade AS partnerGrade,
            p.partner_reserve AS partnerReserve,
            p.partner_career AS partnerCareer,
            p.introduce
        FROM users u
        LEFT JOIN partner p ON u.user_no = p.user_no
        WHERE u.user_no = #{userNo}
    </select>

    <!-- 회원 정보 수정 -->
    <update id="update">
        UPDATE users
        SET 
            user_name = #{userName},
            user_email = #{userEmail},
            user_phone = #{userPhone},
            user_address = #{userAddress},
            user_birth = #{userBirth},
            user_upd_date = now()
        WHERE user_id = #{userId}
    </update>

    <!-- 회원 삭제 -->
    <delete id="delete">
        DELETE FROM users
        WHERE user_no = #{userNo}
          AND user_id = #{userId}
    </delete>

    <!-- 예약 가져오기 -->
    <select id="selectOrdersByUserId">
        SELECT 
            o.orders_no AS ordersNo, 
            o.user_no AS userNo, 
            o.order_status AS orderStatus, 
            o.total_quantity AS totalQuantity, 
            o.total_price AS totalPrice,
            p.service_address AS serviceAddress,
            p.service_date AS regDate,
            u.user_name AS userName, 
            u.user_address AS userAddress, 
            p2.user_name AS partnerName,
            o.title AS serviceName
        FROM 
            orders o
            JOIN users u ON o.user_no = u.user_no
            JOIN order_item oi ON o.orders_no = oi.orders_no
            JOIN service s ON oi.service_no = s.service_no
            JOIN partner pt ON s.partner_no = pt.partner_no
            JOIN users p2 ON pt.user_no = p2.user_no
            JOIN payment p ON o.orders_no = p.orders_no
        WHERE 
            u.user_id = #{userId}
    </select>

    <!-- 예약 삭제 -->
    <delete id="OrdersDelete">
        DELETE FROM orders 
        WHERE orders_no = #{orders_no}
    </delete>

    <!-- 파트너 정보 가져오기 -->
    <select id="selectPartner">
        SELECT partner.*
        FROM users
        INNER JOIN partner ON users.user_no = partner.user_no
        WHERE users.user_no = #{userId}
    </select>

    <!-- userNo로 유저 찾기 -->
    <select id="selectByUserNo" resultType="Users">
        select *
        from users
        WHERE user_no = #{userNo}
    </select>

    <!-- username으로 유저 찾기 -->
    <select id="findByUsername" resultType="Users">
        SELECT * 
        FROM users 
        WHERE user_name = #{username}
    </select>

    <!-- 소셜 회원 가입 -->
    <insert id="insertSocial">
        INSERT INTO user_social ( id, username, provider, social_id, name, email, picture )
        VALUES ( UUID(), #{username}, #{provider}, #{socialId}, #{name}, #{email}, #{picture} )
    </insert>

    <!-- 소셜 회원 조회 -->
    <select id="selectSocial" resultType="UserSocial">
        SELECT * 
        FROM user_social
        WHERE provider = #{provider} 
        AND social_id = #{socialId}
    </select>

    <!-- 소셜 회원 수정 -->
    <update id="updateSocial">
        UPDATE user_social
        SET 
            username = #{username},
            provider = #{provider},
            social_id = #{socialId},
            name = #{name},
            email = #{email},
            picture = #{picture},
            updated_at = #{updatedAt}
        WHERE provider = #{provider} 
        AND social_id = #{socialId}
    </update>

    <!-- 소셜 정보로 회원 조회 -->
    <select id="selectBySocial" resultMap="userMap">
        SELECT 
            u.user_name,
            u.user_id,
            u.user_password,
            u.user_name,
            u.user_email,
            u.enabled,
            u.user_reg_date,
            u.user_upd_date,
            auth.auth
        FROM users u 
        LEFT OUTER JOIN user_auth auth ON u.user_no = auth.user_no
        WHERE u.user_id = (
            SELECT username
            FROM user_social
            WHERE provider = #{provider} 
            AND social_id = #{socialId}
        )
    </select>

</mapper>
